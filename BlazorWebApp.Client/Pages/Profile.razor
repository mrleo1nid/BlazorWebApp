@page "/profile"
@using BlazorWebApp.Shared.Auth
@using BlazorWebApp.Shared.Models
@using System.Threading
@using BlazorWebApp.Client.Helpers
@using BlazorWebApp.Shared.Helpers
@inject IdentityAuthenticationStateProvider authStateProvider
@inject IPawnApi IPawnApi
@attribute [Authorize]


<h3>Profile</h3>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Id пользователя</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
        <TextEdit Text="@info.UserId.ToString()" ReadOnly="true" />
    </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Имя пользователя</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
        <TextEdit Text="@info.UserName" ReadOnly="true" />
    </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Дата регистрации</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
        <TextEdit Text="@info.RegisterDateTime.ToString("F")" ReadOnly="true" />
    </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Email</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
        <TextEdit Text="@info.Email" ReadOnly="true" />
    </FieldBody>
</Field>
<Table>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Полное имя</TableHeaderCell>
            <TableHeaderCell>Возраст</TableHeaderCell>
            <TableHeaderCell>Дата рождения</TableHeaderCell>
            <TableHeaderCell>Пол</TableHeaderCell>
            <TableHeaderCell>Происхождение</TableHeaderCell>
            <TableHeaderCell>Сексуальная ориентация</TableHeaderCell>
            @if (authStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("admin"))
            {
                <TableHeaderCell>Управление</TableHeaderCell>
            }
            <TableHeaderCell>Удалить</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var pawn in pawns)
        {
        <TableRow>
            <TableRowHeader Clicked="@(()=>GetRow( pawn.Id ))">@pawn.FullName</TableRowHeader>
            <TableRowCell Clicked="@(()=>GetRow( pawn.Id ))">@pawn.Age</TableRowCell>
            <TableRowCell Clicked="@(()=>GetRow( pawn.Id ))">@pawn.DateofBirth.ToString("D")</TableRowCell>
            <TableRowCell Clicked="@(()=>GetRow( pawn.Id ))">@pawn.Sex.Description()</TableRowCell>
            <TableRowCell Clicked="@(()=>GetRow( pawn.Id ))">@pawn.Resides.Description()</TableRowCell>
            <TableRowCell Clicked="@(()=>GetRow( pawn.Id ))">@pawn.Orientation.Description()</TableRowCell>
            @if (authStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("admin"))
            {
                <TableRowCell>
                    <Button Color="Color.Danger" Loading="@updbuttonLoading" Clicked="@(()=>ChangeName( pawn.Id ))">Имя</Button>
                    <Button Color="Color.Danger" Loading="@updbuttonLoading" Clicked="@(()=>ChangeSurName( pawn.Id ))">Фамилия</Button>
                </TableRowCell>
            }
            <TableRowCell>
                <Button Color="Color.Danger" Loading="@updbuttonLoading" Clicked="@(()=>RemovePawn( pawn.Id ))">X</Button>
            </TableRowCell>
        </TableRow>
        }
    </TableBody>
</Table>
<Button Color="Color.Info" Loading="@createrandbuttonLoading" Clicked="@CreateRandom">Создать случайного</Button>
<Button Color="Color.Info" Loading="@createrandbuttonLoading" Clicked="@(()=>CreateRandom( 5 ))">Создать 5</Button>
<Button Color="Color.Info" Loading="@createrandbuttonLoading" Clicked="@(()=>CreateRandom( 10 ))">Создать 10</Button>
<Button Color="Color.Info" Loading="@updbuttonLoading" Clicked="@UpdatePawnsClick">Обновить</Button>


@code {

    private UserInfo info;
    private List<Pawn> pawns;
    private Pawn CurrentPawn;
    private bool updbuttonLoading = false;
    private bool createrandbuttonLoading = false;
    private Modal modalRef;

    protected override async Task OnInitializedAsync()
    {
        pawns = new List<Pawn>();
        info = await authStateProvider.GetUserInfo();
        await UpdatePawns(true);
        CurrentPawn = pawns.FirstOrDefault();
    }

    private async Task CreateRandom()
    {
        createrandbuttonLoading = true;
        await IPawnApi.CreateRandom();
        await UpdatePawns(false);
        createrandbuttonLoading = false;
    }
    private async Task CreateRandom(int count)
    {
        createrandbuttonLoading = true;
        for (int i = 0; i < count; i++)
        {
            await IPawnApi.CreateRandom();
            await UpdatePawns(false);
        }
        createrandbuttonLoading = false;
    }
    private async Task UpdatePawnsClick()
    {
        await UpdatePawns(true);
    }
    private async Task UpdatePawns(bool setupdtstate = true)
    {
        updbuttonLoading = setupdtstate;
        pawns = await IPawnApi.GetPawnsByUserId(info.UserId);
        updbuttonLoading = false;
    }
    private async Task GetRow(Guid pawnid)
    {
        CurrentPawn = await IPawnApi.GetPawnById(pawnid);
        ShowModal();
    }
    private async Task ChangeName(Guid pawnid)
    {
        await IPawnApi.GetNextRandomName(pawnid);
        await UpdatePawns(true);
    }
    private async Task ChangeSurName(Guid pawnid)
    {
        await IPawnApi.GetNextRandomSurName(pawnid);
        await UpdatePawns(true);
    }
    private async Task RemovePawn(Guid pawnid)
    {
        await IPawnApi.RemovePawn(pawnid);
        await UpdatePawns(true);

    }
    private void ShowModal()
    {
        modalRef.Show();
    }
    private void HideModal()
    {
        modalRef.Hide();
    }
}
