@page "/profile"
@using BlazorWebApp.Shared.Auth
@using BlazorWebApp.Shared.Models
@using System.Threading
@inject IdentityAuthenticationStateProvider authStateProvider
@inject IPawnApi IPawnApi
@attribute [Authorize]


<h3>Profile</h3>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Id пользователя</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
        <TextEdit Text="@info.UserId.ToString()" ReadOnly="true" />
    </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Имя пользователя</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
        <TextEdit Text="@info.UserName" ReadOnly="true" />
    </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Дата регистрации</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
        <TextEdit Text="@info.RegisterDateTime.ToString("F")" ReadOnly="true" />
    </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Email</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
        <TextEdit Text="@info.Email" ReadOnly="true" />
    </FieldBody>
</Field>
<Table>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Полное имя</TableHeaderCell>

            <TableHeaderCell>Возраст</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var pawn in pawns)
        {
            <TableRow>
                <TableRowHeader>@pawn.FullName</TableRowHeader>

                <TableRowCell>@pawn.Age</TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>
<Button Color="Color.Info" Loading="@createrandbuttonLoading" Clicked="@CreateRandom">Создать случайного</Button>
<Button Color="Color.Info" Loading="@updbuttonLoading" Clicked="@UpdatePawnsClick">Обновить</Button>
@code {

    private UserInfo info;
    private List<Pawn> pawns;
    private bool updbuttonLoading = false;
    private bool createrandbuttonLoading = false;

    protected override async Task OnInitializedAsync()
    {
        pawns = new List<Pawn>();
        info = await authStateProvider.GetUserInfo();
        await UpdatePawns(true);
    }

    private async Task CreateRandom()
    {
        createrandbuttonLoading = true;
        await IPawnApi.CreateRandom();
        await UpdatePawns(false);
        createrandbuttonLoading = false;
    }
    private async Task UpdatePawnsClick()
    {
       await UpdatePawns(true);
    }
    private async Task UpdatePawns(bool setupdtstate = true)
    {
        updbuttonLoading = setupdtstate;
        pawns = new List<Pawn>();
        pawns = await IPawnApi.GetPawnsByUserId(info.UserId);
        updbuttonLoading = false;  
    }
    private async Task GetRow(Guid pawnid)
    {
        var pawn = await IPawnApi.GetPawnById(pawnid);
    }

}
